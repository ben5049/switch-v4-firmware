/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_HEARTBEAT_PB_H_INCLUDED
#define PB_HEARTBEAT_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _ServiceStatus {
    ServiceStatus_OK = 0,
    ServiceStatus_DEGRADED = 1,
    ServiceStatus_DOWN = 2
} ServiceStatus;

/* Struct definitions */
typedef struct _Heartbeat {
    ServiceStatus status;
    bool has_error_code;
    uint32_t error_code; /* only when status != OK */
    uint32_t uptime; /* milliseconds */
} Heartbeat;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ServiceStatus_MIN ServiceStatus_OK
#define _ServiceStatus_MAX ServiceStatus_DOWN
#define _ServiceStatus_ARRAYSIZE ((ServiceStatus)(ServiceStatus_DOWN+1))

#define Heartbeat_status_ENUMTYPE ServiceStatus


/* Initializer values for message structs */
#define Heartbeat_init_default                   {_ServiceStatus_MIN, false, 0, 0}
#define Heartbeat_init_zero                      {_ServiceStatus_MIN, false, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Heartbeat_status_tag                     1
#define Heartbeat_error_code_tag                 2
#define Heartbeat_uptime_tag                     3

/* Struct field encoding specification for nanopb */
#define Heartbeat_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    status,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   error_code,        2) \
X(a, STATIC,   REQUIRED, UINT32,   uptime,            3)
#define Heartbeat_CALLBACK NULL
#define Heartbeat_DEFAULT NULL

extern const pb_msgdesc_t Heartbeat_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Heartbeat_fields &Heartbeat_msg

/* Maximum encoded size of messages (where known) */
#define HEARTBEAT_PB_H_MAX_SIZE                  Heartbeat_size
#define Heartbeat_size                           14

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
